#!/bin/bash

# exit on error
set -e

# read command line arguments
quiet=
verbose=
for i in "$@"
do
case $i in
    -q|--quiet)
    quiet=1
    shift # past argument=value
    ;;
    -v|--verbose)
    verbose=1
    shift # past argument=value
    ;;
    -h|--help)
    printf "
    This Script is supplied with all needed dependencies and ready to run.
    To execute just type \e[2m\$bash BUILD_ALL_LINUX.sh\e[0m.
    There are additional flags available:\n
      -c|--clean   : run a cleanup to remove all *.so and *.a files,
                     generated by this script.s
      -q|--quiet   : run in silent mode with minimal feedback
      -v|--verbose : display issued commands, gets overriden by -q
      -h|--help    : display this help text
      \n"
    exit 0
    shift # past argument=value
    ;;
    -c|--clean)
    printf "
    Cleanup of the BoSSSnative linux library started.
    \e[33mThis Script will remove all *.so and *.a files otherwise created by it.\e[0m\n"
    printf "\n"
    printf "Continuing with cleaning process\n"
    WORKINGDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd )"
    LIBDIR="$WORKINGDIR/lib"
    INCLUDEDIR="$WORKINGDIR/thirdpartylibs"

    if [ -d $LIBDIR ]; then
      printf "Removing shared objects directory $LIBDIR\n"
      rm -r $LIBDIR
    else
      printf "$LIBDIR does not exist, nothing to be done\n"
    fi

    if [ -d $INCLUDEDIR ]; then
      printf "Removing static objects directory $INCLUDEDIR\n"
      rm -r $INCLUDEDIR
    else
      printf "$INCLUDEDIR does not exist, nothing to be done\n"
    fi

    LIBDIR="$WORKINGDIR/lib"
    INCLUDEDIR="$WORKINGDIR/thirdpartylibs"
    printf "\e[32mCleanup process complete, exiting ...\e[0m\n"

    exit 0
    ;;
esac
done

if [ "$quiet" = 1 ] ; then
  exec 4>/dev/null 3>/dev/null
elif [ "$verbose" = 1 ] ; then
  set -x
  exec 4>&2 3>&1
else
  exec 4>&2 3>&1
fi

printf "\n==========================================\n"
printf "\e[4;35m\nBuilding of BoSSSnative shared objects started!\e[0m\n\n"

# declare some path variables
export MUMPSDIR=MUMPS_5.0.2
export METISDIR=metis-5.1.0
export TECIODIR=TECIO
export BOSSSNATIVESEQ=BoSSSnative_seq
export BOSSSNATIVEMPI=BoSSSnative_mpi
export BOSSSNATIVEOMP=BoSSSnative_omp

export WORKINGDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd )"
printf "Setting working directory: $WORKINGDIR\n"

export LIBDIR="$WORKINGDIR/lib"
printf "Setting output directory: $LIBDIR\n"

export INCLUDEDIR="$WORKINGDIR/thirdpartylibs"
printf "Setting search directory for thirdparty libraries: $INCLUDEDIR\n"

if [  "$(uname -m | sed "s/\\ /_/g")" = "x86_64" ]; then
    ARCH=intel64
    printf "Target architecture is: x86_64\n"
  else
    printf "\e[31mUnsupported Architecture, exiting ...\n\e[0m"
    exit -1
fi

if [ "$(uname -s)" = "Linux" ]; then
    PLTFRM=linux
    printf "Target OS is: Linux\n"
  else
    printf "\e[31mUnsupported OS, exiting ...\n\e[0m"
    exit -1
fi

# Set Pathvariable for Intel MKL
if ! source /opt/intel/bin/compilervars.sh -arch $ARCH -platform $PLTFRM ; then
    printf "\e[31mUnable to locate intel mkl, exiting ...\n\e[0m" && exit -1
fi
printf "Setting path to intel mkl: $MKLROOT\n"

printf "\n"
printf "Entering working directory ...\n"
cd $WORKINGDIR

# create the thirdparty library directory
if [ -d "$INCLUDEDIR" ]; then
    printf "\e[32mThirdparty library folder $INCLUDEDIR already exists, commencing ...\e[0m\n"
  else
    printf "\e[33mThirdparty library folder $INCLUDEDIR does not exist, creating ...\e[0m\n"
    mkdir $INCLUDEDIR
fi

# create the output directory
if [ -d "$LIBDIR" ]; then
    printf "\e[32mOutput folder $LIBDIR already exists, commencing ...\e[0m\n"
  else
    printf "\e[33mOutput folder $LIBDIR does not exist, creating ...\e[0m\n"
    mkdir $LIBDIR
fi

printf "\e[32m\nSet-up completed commencing build process\e[0m\n"
printf "\n==========================================\n"

printf "\e[35m\nSearching for required thirdparty libraries\e[0m\n"

printf "\n==========================================\n"

# check for the required libraries if they exist in the correct location
# if not compile them from source using the respective build system
# for more information consider the readmes in the specific folders

# *.lib dirs are ignored by git, but this one is necessary
if [ ! -d $WORKINGDIR/$MUMPSDIR/lib ] ; then
  printf "creating $WORKINGDIR/$MUMPSDIR/lib ...\n"
  mkdir $WORKINGDIR/$MUMPSDIR/lib
fi

printf "\n\e[35mChecking for single and double precision sequential MUMPS\e[0\n"
FILE1=libmumps_common_seq.a
FILE2=libdmumps_seq.a
FILE3=libsmumps_seq.a
if [ -f "$INCLUDEDIR/$FILE1" ] && [ -f "$INCLUDEDIR/$FILE2" ] &&  [ -f "$INCLUDEDIR/$FILE3" ]; then
  printf "\e[32m$FILE1, $FILE2, $FILE3 exists, skipping compilation of MUMPS\e[0m\n"
else
  printf "\e[33msequential MUMPS incomplete, commencing compilation of MUMPS\e[0m\n"
  cd $WORKINGDIR/$MUMPSDIR
  cp Make.inc/Makefile.MUMPS.SEQ ./Makefile.inc
  # first clean up
  make clean 1>/dev/null
  if [ ! -f "$INCLUDEDIR/$FILE2" ]; then
    printf "\e[33m$FILE2 does not exist, starting compilation of dMUMPS\e[0m\n"
    if ! make 'd' >&3 2>&4 ; then
      printf "\e[31mAn Error occured while building MUMPS!\nPlease check the output and commence accordingly.\nNow exiting ...\n\e[0m" && exit -1
    fi
    cp lib/libdmumps.a $INCLUDEDIR/$FILE2
  fi
  if [ ! -f "$INCLUDEDIR/$FILE3" ]; then
    printf "\e[33m$FILE3 does not exist, starting compilation of sMUMPS\e[0m\n"
    if ! make 's' >&3 2>&4 ; then
      printf "\e[31mAn Error occured while building MUMPS!\nPlease check the output and commence accordingly.\nNow exiting ...\n\e[0m" && exit -1
    fi
    cp lib/libsmumps.a $INCLUDEDIR/$FILE3
  fi
  cp lib/libmumps_common.a $INCLUDEDIR/$FILE1
  cp lib/libpord.a $INCLUDEDIR/libpord_seq.a
  cp libseq/libmpiseq.a $INCLUDEDIR/libmpiseq.a
  make clean 1>/dev/null
  rm ./Makefile.inc
  cd $WORKINGDIR
  printf "\e[32mDone compiling sequential MUMPS\e[0m\n"
fi

printf "\n==========================================\n"

printf "\n\e[35mChecking for single and double precision openMP parallel MUMPS\e[0m\n"
FILE1=libmumps_common_omp.a
FILE2=libdmumps_omp.a
FILE3=libsmumps_omp.a
if [ -f "$INCLUDEDIR/$FILE1" ] && [ -f "$INCLUDEDIR/$FILE2" ] && [ -f "$INCLUDEDIR/$FILE3" ]; then
  printf "\e[32m$FILE1, $FILE2, $FILE3 exists, skipping compilation of MUMPS\e[0m\n"
else
  printf "\e[33mopenMP parallel MUMPS incomplete, commencing compilation of MUMPS\e[0m\n"
  cd $WORKINGDIR/$MUMPSDIR
  cp Make.inc/Makefile.MUMPS.OMP ./Makefile.inc
  # first clean up
  make clean 1>/dev/null
  if [ ! -f "$INCLUDEDIR/$FILE2" ]; then
    printf "\e[33m$FILE2 does not exist, starting compilation of dMUMPS\e[0m\n"
    if ! make 'd' >&3 2>&4 ; then
      printf "\e[31mAn Error occured while building MUMPS!\nPlease check the output and commence accordingly.\nNow exiting ...\n\e[0m" && exit -1
    fi
    cp lib/libdmumps.a $INCLUDEDIR/$FILE2
  fi
  if [ ! -f "$INCLUDEDIR/$FILE3" ]; then
    printf "\e[33m$FILE3 does not exist, starting compilation of sMUMPS\e[0m\n"
    if ! make 's' >&3 2>&4 ; then
      printf "\e[31mAn Error occured while building MUMPS!\nPlease check the output and commence accordingly.\nNow exiting ...\n\e[0m" && exit -1
    fi
    cp lib/libsmumps.a $INCLUDEDIR/$FILE3
  fi
  cp lib/libmumps_common.a $INCLUDEDIR/$FILE1
    cp lib/libpord.a $INCLUDEDIR/libpord_omp.a
  make clean 1>/dev/null
  rm ./Makefile.inc
  cd $WORKINGDIR
  printf "\e[32mDone compiling openMP parallel MUMPS\e[0m\n"
fi

printf "\n==========================================\n"

printf "\n\e[35mChecking for single and double precision MPI parallel MUMPS\e[0m\n"
FILE1=libmumps_common_mpi.a
FILE2=libdmumps_mpi.a
FILE3=libsmumps_mpi.a
if [ -f "$INCLUDEDIR/$FILE1" ] && [ -f "$INCLUDEDIR/$FILE2" ] && [ -f "$INCLUDEDIR/$FILE3" ]; then
  printf "\e[32m$FILE1, $FILE2, $FILE3 exists, skipping compilation of MUMPS\e[0m\n"
else
  printf "\e[33mMPI parallel MUMPS incomplete, commencing compilation of MUMPS\e[0m\n"
  cd $WORKINGDIR/$MUMPSDIR
  cp Make.inc/Makefile.MUMPS.MPI ./Makefile.inc
  # first clean up
  make clean 1>/dev/null
  if [ ! -f "$INCLUDEDIR/$FILE2" ]; then
    printf "\e[33m$FILE2 does not exist, starting compilation of dMUMPS\e[0m\n"
    if ! make 'd' >&3 2>&4 ; then
      printf "\e[31mAn Error occured while building MUMPS!\nPlease check the output and commence accordingly.\nNow exiting ...\n\e[0m" && exit -1
    fi
    cp lib/libdmumps.a $INCLUDEDIR/$FILE2
  fi
  if [ ! -f "$INCLUDEDIR/$FILE3" ]; then
    printf "\e[33m$FILE3 does not exist, starting compilation of sMUMPS\e[0m\n"
    if ! make 's' >&3 2>&4 ; then
      printf "\e[31mAn Error occured while building MUMPS!\nPlease check the output and commence accordingly.\nNow exiting ...\n\e[0m" && exit -1
    fi
    cp lib/libsmumps.a $INCLUDEDIR/$FILE3
  fi
  cp lib/libmumps_common.a $INCLUDEDIR/$FILE1
    cp lib/libpord.a $INCLUDEDIR/libpord_mpi.a
  make clean 1>/dev/null
  rm ./Makefile.inc
  cd $WORKINGDIR
  printf "\e[32mDone compiling MPI parallel MUMPS\e[0m\n"
fi

printf "\n==========================================\n"

printf "\e[35m\nChecking for METIS\e[0m\n"
FILE=libmetis.a
if [ -f "$INCLUDEDIR/$FILE" ]; then
  printf "\e[32m$FILE exists, skipping compilation of METIS\e[0m\n"
else
  printf "\e[33m$FILE does not exist, commencing compilation of METIS\e[0m\n"
  cd $WORKINGDIR/$METISDIR
  if ! make config cc=gcc prefix=$WORKINGDIR/metis-5.1.0/install >&3 2>&4 ; then
    printf "\e[31mAn Error occured while building METIS!\nPlease check the output and commence accordingly.\nNow exiting ...\n\e[0m" && exit -1
  fi
  if ! make install >&3 2>&4 ; then
    printf "\e[31mAn Error occured while building METIS!\nPlease check the output and commence accordingly.\nNow exiting ...\n\e[0m" && exit -1
  fi
  cp install/lib/libmetis.a $INCLUDEDIR
  cd build/Linux-x86_64
  make clean 1>/dev/null
  cd ../..
  make clean 1>/dev/null
  make uninstall 1>/dev/null
  make distclean 1>/dev/null
  cd $WORKINGDIR
  printf "\e[32mDone compiling METIS\e[0m\n"
fi

printf "\n==========================================\n"

printf "\e[35m\nChecking for TECIO Tecplot library\e[0m\n"
FILE=libtecio.a
if [ -f "$INCLUDEDIR/$FILE" ]; then
  printf "\e[32m$FILE exists, skipping compilation of TECIO\e[0m\n"
else
  printf "\e[33m$FILE does not exist, commencing compilation of TECIO\e[0m\n"
  cd $WORKINGDIR/$TECIODIR/teciosrc
  make -f Makefile.linux clean 1>/dev/null
  if ! make -f Makefile.linux >&3 2>&4 ; then
    printf "\e[31mAn Error occured while building TECIO!\nPlease check the output and commence accordingly.\nNow exiting ...\n\e[0m" && exit -1
  fi
  cp libtecio.a $INCLUDEDIR
  make -f Makefile.linux clean 1>/dev/null
  cd $WORKINGDIR
  printf "\e[32mDone compiling TECIO\e[0m\n"
fi

printf "\n==========================================\n"

printf "\n\e[32mAll thirdparty libraries existent!\e[0m\n"

printf "\n==========================================\n"

printf "\n\e[35mStarting compiling and linking of libBoSSSnative_seq.so\e[0m\n\n"
cd $WORKINGDIR/$BOSSSNATIVESEQ
if ! make >&3 2>&4 ; then
  printf "\e[31mAn Error occured while building/linking libBoSSSnative_seq.so!\nPlease check the output and commence accordingly.\nNow exiting ...\n\e[0m" && exit -1
fi
#make clean -f $WORKINGDIR/BoSSSnative_seq/Makefile 1>/dev/null 2>&1
make clean 1>/dev/null
printf "\e[32m\nFinished compiling and linking of libBoSSSnative_seq.so\e[0m\n"

printf "\n==========================================\n"

printf "\e[35m\nStarting compiling and linking of libBoSSSnative_omp.so\e[0m\n\n"
cd $WORKINGDIR/$BOSSSNATIVEOMP
if ! make >&3 2>&4 ; then
  printf "\e[31mAn Error occured while building/linking libBoSSSnative_omp.so!\nPlease check the output and commence accordingly.\nNow exiting ...\n\e[0m" && exit -1
fi
make clean 1>/dev/null
printf "\e[32m\nFinished compiling and linking of libBoSSSnative_omp.so\e[0m\n"

printf "\n==========================================\n"

printf "\nAttempting to fix mpi dependencies\n"

printf "\e[35m\nStarting compiling and linking of libBoSSSnative_mpi.so\e[0m\n\n"
cd $WORKINGDIR/$BOSSSNATIVEMPI
if ! make >&3 2>&4 ; then
  printf "\e[31mAn Error occured while building/linking libBoSSSnative_mpi.so!\nPlease check the output and commence accordingly.\nNow exiting ...\n\e[0m" && exit -1
fi
make clean 1>/dev/null
printf "\e[32m\nFinished compiling and linking of libBoSSSnative_mpi.so\e[0m\n"

printf "\n==========================================\n"

printf "\nAttempting to fix mpi dependencies\n"

cd $WORKINGDIR
if hash patchelf 2>/dev/null; then
  printf "WARNING: Following command only works on libmpi.so.12 and libmpifh_mpifh.so.12\n"
  printf "Change the versions accordingly if needed.\n"
  patchelf --replace-needed libmpi.so.12 libmpi.so $LIBDIR/libBoSSSnative_mpi.so
  patchelf --replace-needed libmpi_mpifh.so.12 libmpi_mpifh.so $LIBDIR/libBoSSSnative_mpi.so
else
  printf "patchelf is not installed on this System continuing without further action\n"
fi

printf "\n==========================================\n"

printf "\e[4;32m\nBuild process for BoSSSnative shared objects succesfully completed!\e[0m\n\n"
