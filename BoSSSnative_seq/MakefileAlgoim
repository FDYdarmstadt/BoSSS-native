CC := gcc
CXX := g++
SHELL := /bin/bash

# Algoim wrapper and source file locations
ALGOIMWRAPPER_DIR := ../Algoim/CppAlgoim
ALGOIM_SOURCE_DIR := ../Algoim/CppAlgoim/algoim/algoim

# Source and wrapper files
WRAPPERS := $(wildcard $(ALGOIMWRAPPER_DIR)/*.c)
CPP_SOURCES := $(wildcard $(ALGOIMWRAPPER_DIR)/Algoimwrapper.cpp) $(wildcard $(ALGOIM_SOURCE_DIR)/*.cpp)
TARGET := libAlgoimwrapper.so

# Library includes
LIBINCLUDE := $(INCLUDEDIR)/libpord_seq.a $(INCLUDEDIR)/libmpiseq.a $(INCLUDEDIR)/libmumps_common_seq.a \
			  $(INCLUDEDIR)/libdmumps_seq.a $(INCLUDEDIR)/libsmumps_seq.a $(INCLUDEDIR)/libmetis.a \
              $(MKLROOT)/lib/intel64/libmkl_intel_lp64.a $(MKLROOT)/lib/intel64/libmkl_core.a \
              $(MKLROOT)/lib/intel64/libmkl_sequential.a $(MKLROOT)/lib/intel64/libmkl_gf_lp64.a

# Include directories
CFLAGS := -I$(ALGOIM_SOURCE_DIR) -I$(ALGOIMWRAPPER_DIR)/include -fPIC
CXXFLAGS := -std=c++17 -I$(ALGOIM_SOURCE_DIR) -I$(ALGOIMWRAPPER_DIR)/include -fPIC

all: $(TARGET)

# Compile all functions from wrapper and source files into one dynamic library
$(TARGET): $(patsubst %.c,%.o,$(WRAPPERS)) $(patsubst %.cpp,%.o,$(CPP_SOURCES))
	@printf "\e[34mTrying to link ...\e[0m\n"
	$(CC) $^ -shared -o $(LIBDIR)/$@ -Wl,--start-group $(LIBINCLUDE) -Wl,--end-group \
	-lpthread -lm -ldl -lstdc++ -lgfortran -Wl,-rpath,'$$ORIGIN'/dependencies
	@printf "\e[34mSuccess!\e[0m\n"

# Compilation rule for C source files
%.o: %.c
	@printf "\e[34mCompiling $< (C file)\e[0m\n"
	$(CC) $(CFLAGS) -c $< -o $@
	@printf "\e[34mDone!\e[0m\n\n"

# Compilation rule for C++ source files
%.o: %.cpp
	@printf "\e[34mCompiling $< (C++ file)\e[0m\n"
	$(CXX) $(CXXFLAGS) -c $< -o $@
	@printf "\e[34mDone!\e[0m\n\n"

clean:
	cd "$(ALGOIMWRAPPER_DIR)"; \
	rm -f *.o
	cd "$(ALGOIM_SOURCE_DIR)"; \
	rm -f *.o
